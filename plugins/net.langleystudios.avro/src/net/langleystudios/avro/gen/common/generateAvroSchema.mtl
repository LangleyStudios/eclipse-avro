[comment
/*******************************************************************************
 * Copyright (c) 2014 Langley Studios
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Langley Studios - initial API and implementation
 *******************************************************************************/
/]
[comment encoding = UTF-8 /]
[module generateAvroSchema('http://www.eclipse.org/emf/2002/Ecore')]

[comment 
	This template recursively walks a package to generate Avro schemas
	for each EClass in the contained packages.
/]
[template public generateAvroSchema(anEPackage : EPackage)]
[comment @main/]
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	[eclass.generateSchema(anEPackage.name)/]
[/for]
[for (epackage: EPackage | anEPackage.eSubpackages)]
	[epackage.generateAvroSchema()/]
[/for]
[/template]

[comment 
	This template recursively walks a package to generate Avro schemas
	for each EClass in the contained packages.
/]
[template public generateAvroSchema(anEPackage : EPackage, basePackage : String) ]
[comment @main/]
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	[eclass.generateSchema(basePackage)/]
[/for]
[for (epackage: EPackage | anEPackage.eSubpackages)]
	[epackage.generateAvroSchema()/]
[/for]
[/template]

[comment
	This template generates the Avro schema for an EClass
/]
[template public generateSchema(anEClass : EClass, basePackage : String)]
[comment Tell the utility to clear the class list and start with the current class/]
[startList(anEClass)/]

[comment Create a file for each schema/]
[file ('schema/'.concat(anEClass.ePackage.name).concat('.'.concat(anEClass.name.concat('.avsc'))), false, 'UTF-8')]
{"type":"record","name":"[anEClass.name/]","namespace":"[basePackage.concat('.').concat(anEClass.ePackage.name).concat('.avro')/]","fields":['['/]
[for (aFeature: EStructuralFeature | anEClass.eAllStructuralFeatures)]
[if(i > 1)],[/if][aFeature.generateFeature()/]
[/for][']'/]}
[/file]
[/template]

[template public generateRecord(anEClass : EClass) post(trim())]
{"type":"record","name":"[anEClass.name/]","fields":['['/]
[for (aFeature: EStructuralFeature | anEClass.eAllStructuralFeatures)]
[if(i > 1)],[/if][aFeature.generateFeature()/]
[/for][']'/]}
[/template]

[template public generateArray(aFeature: EStructuralFeature) post(trim())]
{"type":"array","items":
[if(aFeature.oclIsTypeOf(EAttribute))]
"[aFeature.eType.printAvroType()/]"
[else]
	[if(aFeature.oclIsTypeOf(EReference) and not aFeature.oclAsType(EReference).containment)]
		"string"
	[elseif(aFeature.oclIsTypeOf(EReference) and addClass(aFeature.oclAsType(EReference).eReferenceType))]
		[aFeature.oclAsType(EReference).eReferenceType.generateRecord()/]
	[else]
		"[aFeature.eType.name/]"
	[/if]
[/if]}
[/template]

[comment
	This template generates code for an EStructuralFeature
/]
[template public generateFeature(aFeature : EStructuralFeature) post(trim())]
[if(aFeature.upperBound <> 1)]
	[if(aFeature.lowerBound <> 0)]
		{"name":"[aFeature.name/]","type":[aFeature.generateArray()/]}
	[else]
		{"name":"[aFeature.name/]","type":['['/]"null",[aFeature.generateArray()/][']'/]}
	[/if]
[elseif(aFeature.oclIsTypeOf(EAttribute))]
	[aFeature.oclAsType(EAttribute).generateAttribute()/]
[else]
	[aFeature.oclAsType(EReference).generateReference()/]
[/if]
[/template]

[comment
	This template generates code for an EReference
/]
[template public generateReference(aReference : EReference) post(trim())]
[if(aReference.containment)]
	[if(aReference.upperBound <> 1)]
		[if(aReference.lowerBound <> 0)]
			{"name":"[aReference.name/]","type":[aReference.generateArray()/]}
		[else]
			{"name":"[aReference.name/]","type":['['/]"null",[aReference.generateArray()/][']'/]}
		[/if]
	[else]
		[if(addClass(aReference.eReferenceType))]
			[if(aReference.lowerBound <> 0)]
			{"name":"[aReference.name/]","type":[aReference.eReferenceType.generateRecord()/]}
			[else]
			{"name":"[aReference.name/]","type":['['/]"null",[aReference.eReferenceType.generateRecord()/][']'/]}
			[/if]
		[else]
			[if(aReference.lowerBound <> 0)]
			{"name":"[aReference.name/]","type":"[aReference.eType.name/]"}
			[else]
			{"name":"[aReference.name/]","type":['['/]"null","[aReference.eType.name/]"[']'/]}
			[/if]
		[/if]
	[/if]
[else]
	[if(aReference.upperBound <> 1)]
		[if(aReference.lowerBound <> 0)]
			{"name":"[aReference.name/]","type":"string"}
		[else]
			{"name":"[aReference.name/]","type":['['/]"null","string"[']'/]}
		[/if]
	[else]
		[if(aReference.lowerBound <> 0)]
		{"name":"[aReference.name/]","type":"string"}
		[else]
		{"name":"[aReference.name/]","type":['['/]"null","string"[']'/]}
		[/if]
	[/if]
[/if]
[/template]

[template public generateAttribute(anAttribute : EAttribute) post(trim())]
[if(anAttribute.upperBound <> 1)]
	[if(anAttribute.lowerBound <> 0)]
		{"name":"[anAttribute.name/]","type":[anAttribute.generateArray()/]}
	[else]
		{"name":"[anAttribute.name/]","type":['['/]"null",[anAttribute.generateArray()/][']'/]}
	[/if]
[else]
	[if(anAttribute.eType.oclIsTypeOf(EEnum))]
		{"name":"[anAttribute.name/]","type":[anAttribute.eType->filter(EEnum).generateEnum()/]}}
	[else]
		[if(anAttribute.lowerBound <> 0)]
		{"name":"[anAttribute.name/]","type":"[anAttribute.eType.printAvroType()/]"}
		[elseif(anAttribute.eType.name = 'EString' or anAttribute.eType.name = 'EDate')]
		{"name":"[anAttribute.name/]","type":['['/]"null","[anAttribute.eType.printAvroType()/]"[']'/]}
		[else]
		{"name":"[anAttribute.name/]","type":"[anAttribute.eType.printAvroType()/]"}
		[/if]
	[/if]
[/if]
[/template]

[template private generateEnum(eEnum: EEnum) post(trim()) ]
{"type":"enum","name":"[eEnum.name/]","symbols":['['/][for (eLiteral : EEnumLiteral | eEnum.eLiterals)][if(i > 1)],[/if]"[eLiteral.name/]"[/for][']'/]
[/template]

[template private printAvroType(eClass: EClassifier) post(trim())]
[if (eClass.name = 'EInt')]int
[elseif (eClass.name = 'EShort')]short
[elseif (eClass.name = 'EShort')]int
[elseif (eClass.name = 'ELong')]long
[elseif (eClass.name = 'EDouble')]double
[elseif (eClass.name = 'EFloat')]float
[elseif (eClass.name = 'EString')]string
[elseif (eClass.name = 'EBoolean')]boolean
[elseif (eClass.name = 'EDate')]string
[else]null[/if]
[/template]

[query public addClass(arg0 : EClass) : Boolean
	= invoke('net.langleystudios.avro.gen.Utility', 'addClass(org.eclipse.emf.ecore.EClass)', Sequence{arg0})
/]
[query public startList(arg0: EClass) : OclVoid
	= invoke('net.langleystudios.avro.gen.Utility', 'startList(org.eclipse.emf.ecore.EClass)', Sequence{arg0})
/]
[query public printFeature(arg0 : EStructuralFeature) : OclVoid
	= invoke('net.langleystudios.avro.gen.Utility', 'printFeature(org.eclipse.emf.ecore.EStructuralFeature)', Sequence{arg0})
/]
[query public printClass(arg0 : EClass) : OclVoid
	= invoke('net.langleystudios.avro.gen.Utility', 'printClass(org.eclipse.emf.ecore.EClass)', Sequence{arg0})
/]
