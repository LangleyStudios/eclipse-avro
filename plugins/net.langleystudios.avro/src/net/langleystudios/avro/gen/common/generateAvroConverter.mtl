[comment
/*******************************************************************************
 * Copyright (c) 2014 Langley Studios
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Langley Studios - initial API and implementation
 *******************************************************************************/
/]
[comment encoding = UTF-8 /]
[module generateAvroConverter('http://www.eclipse.org/emf/2002/Ecore')]

[template public generateConverter(anEPackage : EPackage) {
basePackage : String = getBasePackage();
avroPrefix : String = basePackage.concat('.avro.');
emfPrefix : String = basePackage.concat('.');
emfPackage : String = emfPrefix.concat(getPackage());
emfFactory : String = emfPrefix.concat(getFactory());
}]
[comment @main/]

[file ('ConvertEMFtoAvro.java', false, 'UTF-8')]
package [basePackage/].avro;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import net.langleystudios.avro.AvroEMFConverter;

import org.apache.avro.Schema;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;

[comment Main class definition /]
public class ConvertEMFtoAvro implements AvroEMFConverter {

public Schema getSchema() {
	List<Schema> schemaList = new ArrayList<Schema>();
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	schemaList.add([avroPrefix.concat(eclass.name)/].SCHEMA$);
[/for]	
	Schema unionSchema = Schema.createUnion(schemaList);
	return unionSchema;
}

public Object convertEObject(EObject eobject) {
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	if(eobject instanceof [emfPrefix.concat(eclass.name)/])
	{
		return convert[eclass.name/](([emfPrefix.concat(eclass.name)/])eobject);
	}
[/for]
	return null;
}

[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
public [avroPrefix.concat(eclass.name)/] convert[eclass.name/](
	[emfPrefix.concat(eclass.name)/] input) {

	[avroPrefix.concat(eclass.name)/] output = new [avroPrefix.concat(eclass.name)/]();

[for (aFeature: EStructuralFeature | eclass.eAllStructuralFeatures)]
[if( not aFeature.eType.name.equalsIgnoreCase('EFeatureMapEntry'))]
[if(aFeature.upperBound <> 1)]
	List<[avroPrefix.concat(aFeature.eType.name)/]> [aFeature.name/]List = new ArrayList<[avroPrefix.concat(aFeature.eType.name)/]>();
	for([emfPrefix.concat(aFeature.eType.name)/] itr : input.get[aFeature.name.toUpperFirst()/]()) {
		[aFeature.name/]List.add(convert[aFeature.eType.name/](itr));
	}
	output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]List);
[elseif(aFeature.oclIsTypeOf(EAttribute))]
	[if(aFeature.eType.oclIsTypeOf(EEnum))]
	output.set[aFeature.name.toUpperFirst()/]([avroPrefix.concat(aFeature.eType.name)/].valueOf(input.get[aFeature.name.toUpperFirst()/]().getLiteral()));
	[elseif(aFeature.eType.name.equalsIgnoreCase('EBoolean'))]
	output.set[aFeature.name.toUpperFirst()/](input.is[aFeature.name.toUpperFirst()/]());
	[elseif(aFeature.eType.name.equalsIgnoreCase('EDate'))]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]().toString());
	[else]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[/if]
[else]
	output.set[aFeature.name.toUpperFirst()/](convert[aFeature.eType.name/](input.get[aFeature.name.toUpperFirst()/]()));
[/if]
[/if]

[/for]

	return output;
}

[/for]

public EObject convertAvroObject(Object object) {
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
[if (eclass.abstract = false)]
	if(object instanceof [avroPrefix.concat(eclass.name)/])
	{
		return convert[eclass.name/](([avroPrefix.concat(eclass.name)/])object);
	}
[/if]
[/for]
	return null;
}

[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
[if (eclass.abstract = false)]
public [emfPrefix.concat(eclass.name)/] convert[eclass.name/](
	[avroPrefix.concat(eclass.name)/] input) {

	[emfPrefix.concat(eclass.name)/] output = [emfFactory/].eINSTANCE.create[eclass.name/]();

[for (aFeature: EStructuralFeature | eclass.eAllStructuralFeatures)]
[if( not aFeature.eType.name.equalsIgnoreCase('EFeatureMapEntry'))]
[if(aFeature.upperBound <> 1)]
	EList<[emfPrefix.concat(aFeature.eType.name)/]> [aFeature.name/]List = output.get[aFeature.name.toUpperFirst()/]();
	for([avroPrefix.concat(aFeature.eType.name)/] itr : input.get[aFeature.name.toUpperFirst()/]()) {
		[aFeature.name/]List.add(([emfPrefix.concat(aFeature.eType.name)/])convertAvroObject(itr));
	}
[elseif(aFeature.oclIsTypeOf(EAttribute))]
	[if(aFeature.eType.oclIsTypeOf(EEnum))]
	output.set[aFeature.name.toUpperFirst()/]([emfPrefix.concat(aFeature.eType.name)/].valueOf(input.get[aFeature.name.toUpperFirst()/]().name()));
	[elseif(aFeature.eType.name.equalsIgnoreCase('EBoolean'))]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[elseif(aFeature.eType.name.equalsIgnoreCase('EDate'))]
	try {
		Date [aFeature.name/]Date = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH).parse(input.get[aFeature.name.toUpperFirst()/]().toString());
		output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]Date);
	} catch(ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	[elseif(aFeature.eType.name.equalsIgnoreCase('EString'))]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]().toString());
	[else]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[/if]
[else]
	output.set[aFeature.name.toUpperFirst()/](convert[aFeature.eType.name/](input.get[aFeature.name.toUpperFirst()/]()));
[/if]
[/if]
[/for]

	return output;
}
[/if]
[/for]

}
[/file]

[/template]

[query public getBasePackage(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getBasePackage()', Sequence{tracecontext})
/]
[query public getPackage(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getPackage()', Sequence{tracecontext})
/]
[query public getFactory(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getFactory()', Sequence{tracecontext})
/]
